// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refresh_tokens.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const assignRefreshTokenToUser = `-- name: AssignRefreshTokenToUser :one
INSERT INTO refresh_tokens (token, created_at, updated_at, user_id, expires_at, revoked_at)
VALUES (
    $2,
    NOW(),
    NOW(),
    $1,
    (NOW() + interval '60 day'),
    NULL
)
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type AssignRefreshTokenToUserParams struct {
	UserID uuid.UUID
	Token  string
}

func (q *Queries) AssignRefreshTokenToUser(ctx context.Context, arg AssignRefreshTokenToUserParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, assignRefreshTokenToUser, arg.UserID, arg.Token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const checkAndFetchRefreshToken = `-- name: CheckAndFetchRefreshToken :one
SELECT token, created_at, updated_at, user_id, expires_at, revoked_at
FROM refresh_tokens
WHERE token = $1
    AND expires_at > NOW()
    AND revoked_at IS NULL
`

func (q *Queries) CheckAndFetchRefreshToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, checkAndFetchRefreshToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
SELECT users.id, users.created_at, users.updated_at, users.email, users.hashed_password
FROM refresh_tokens
JOIN users ON refresh_tokens.user_id = users.id
WHERE refresh_tokens.token = $1
`

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, token string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const revokeRefreshTokenFromUser = `-- name: RevokeRefreshTokenFromUser :exec
UPDATE refresh_tokens
SET revoked_at = NOW(), updated_at = NOW()
WHERE user_id = $1
`

func (q *Queries) RevokeRefreshTokenFromUser(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshTokenFromUser, userID)
	return err
}
